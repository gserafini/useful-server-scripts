#! /bin/bash

#################################################################
#
# Script to tell svn to schedule for addition new unknown files 
# found using svn st | grep ? and to schedule for deletion files
# found using svn st | grep !
#
# Useful for when upgrading WordPress using automatic method and
# we want to check in the changed fileset
#
# Author: Gabriel Serafini <gserafini@gmail.com>
# http://www.gabrielserafini.com
#
# INSTALL
# Symlink the file into /usr/local/bin to enable system-wide
# ln -s $PWD/svn_add_remove /usr/local/bin/svn_add_remove
################################################################

USER=(`whoami`)
DIR_OWNER=(`ls -al | awk 'NR==2{print $3}'`)

#if [[ "$USER" == 'root' ]];
#then
#  echo
#  echo "**** WARNING: You are operating as root user. ****"
#  echo "It is strongly recommended to NOT schedule or check in files as root due to permissions issues with .svn directories."
#  echo
#  echo "Would you like to su to the current directory's owner ($DIR_OWNER)? [y]/n"
#  read -e su
#  if [[ "$su" == 'y' || "$su" == "" ]]
#  then
#    echo "Changing user to $DIR_OWNER for svn operations, will exit back to root when done..."
#    su $DIR_OWNER -c svn_add_remove
#    exit 0
#  else
#    echo "Proceed as root user... but keep in mind you may have to do some cleanup afterwards..."
#  fi
#  echo
#fi


echo "Searching for unknown files..."
echo "svn st | grep ? #excluding wp-content/cache/ files"

TOTAL_COUNT=(`svn st | grep ^? | grep -v ".*/wp-content/cache.*" | grep -v error_log | grep -v ftpquota | wc -l`)

if [ "$TOTAL_COUNT" -gt 0 ]
then
  svn st | grep ^? | grep -v ".*/wp-content/cache.*" | grep -v error_log | grep -v ftpquota
  echo "----------------------------------------------------"
  echo "TOTAL UNKNOWN FILES: $TOTAL_COUNT"
  echo
  echo "Schedule these files for addition? [y]/n "
  read -e t1
  echo

  if [[ "$t1" == 'y' || "$t1" == 'yes' || "$t1" == "" ]];
  then
    svn st | grep ^? | grep -v ".*/wp-content/cache.*" | grep -v error_log | grep -v ftpquota |  sed 's/? *//' | sed 's| |\\ |g' | awk '{print $1"@"}' |  xargs svn add
    echo
    echo "$TOTAL_COUNT files scheduled for addition. Don't forget to commit your changes. ;)"
    echo
  fi

fi

echo "Searching for missing files..."
echo "svn st | grep !"

TOTAL_COUNT=(`svn st | grep ^! | wc -l`)

if [ "$TOTAL_COUNT" -gt '0' ]
then

  svn st | grep ^!
  echo "----------------------------------------------------"
  echo "TOTAL MISSING FILES: $TOTAL_COUNT"
  echo
  echo "Schedule these files for deletion? [y]/n"
  read -e t2

  if [[ "$t2" == 'y' || "$t2" == 'yes' || "$t2" == "" ]];
  then
    svn st | grep ^! | sed 's/! *//' | sed 's| |\\ |g' | awk '{print $1"@"}' |  xargs svn rm
    echo "$TOTAL_COUNT files scheduled for deletion. Don't forget to commit your changes. ;)"
    echo
  fi

fi

echo "Searching for replaced files..."
echo "svn st | grep ~"

 TOTAL_COUNT=(`svn st | grep ^\~ | wc -l`)
 
 if [ "$TOTAL_COUNT" -gt '0' ]
 then
 
   svn st | grep ^\~
   echo "----------------------------------------------------"
   echo "TOTAL REPLACED RESOURCES: $TOTAL_COUNT"
   echo
   echo "Check in the new versions? (This will svn rm the old versions and svn add and commit the new ones and you'll need to enter your svn password 3 times - up > rm > add) [y]/n"
   read -e t2
 
   if [[ "$t2" == 'y' || "$t2" == 'yes' || "$t2" == "" ]];
   then
     svn st | grep ^\~ | sed 's/\~ *//' | sed 's| |\\ |g' | awk '{print $1"@"}' | while read line
 		do
 			mv $line "$line-tmp"
			svn up $line
 			svn rm $line
			svn ci $line -m "Deleting old file(s)"
 			mv "$line-tmp" $line
			svn add $line
			svn ci $line -m "Adding new version of file(s)"
 		done
 
     echo
   fi
 
 fi

if [[ "$USER" == 'root' ]];
then
  echo "Cleaning changing all .svn files back to correct user / group..."
  LOCALDIROWNER=`stat -c "%U" .`; find . -user root | grep ".svn" | xargs -d '\n' chown $LOCALDIROWNER:$LOCALDIROWNER
  echo "Checking for any final files owned by root..."
  MOREFILES=`find . -user root`
    if [ "$MOREFILES" != '' ];
      then
        echo "Found file(s) owned by root.  Fix? [y]/n"
        find . -user root -exec ls -al {} \;
        read -e t2
        if [[ "$t2" == 'y' || "$t2" == 'yes' || "$t2" == "" ]];
        then
          find . -user root | xargs -d '\n' chown $LOCALDIROWNER:$LOCALDIROWNER
        fi
    fi
  echo "Done!"
fi

exit 0

